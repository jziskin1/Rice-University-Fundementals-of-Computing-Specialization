"""
Student portion of Zombie Apocalypse mini-project
"""

import random
import poc_grid
import poc_queue
import poc_zombie_gui

# global constants
EMPTY = 0 
FULL = 1
FOUR_WAY = 0
EIGHT_WAY = 1
OBSTACLE = 5
HUMAN = 6
ZOMBIE = 7

class Apocalypse(poc_grid.Grid):
    """
    Class for simulating zombie pursuit of human on grid with
    obstacles
    """

    def __init__(self, grid_height, grid_width, obstacle_list = None, 
                 zombie_list = None, human_list = None):
        """
        Create a simulation of given size with given obstacles,
        humans, and zombies
        """
        poc_grid.Grid.__init__(self, grid_height, grid_width)
        if obstacle_list != None:
            for cell in obstacle_list:
                self.set_full(cell[0], cell[1])
        if zombie_list != None:
            self._zombie_list = list(zombie_list)
        else:
            self._zombie_list = []
        if human_list != None:
            self._human_list = list(human_list)  
        else:
            self._human_list = []

        
    def clear(self):
        """
        Set cells in obstacle grid to be empty
        Reset zombie and human lists to be empty
        """
        poc_grid.Grid.clear(self)
        self._zombie_list = []
        self._human_list = []
        
        
    def add_zombie(self, row, col):
        """
        Add zombie to the zombie list
        """
        self._zombie_list.append((row, col))
                
    def num_zombies(self):
        """
        Return number of zombies
        """
        return len(self._zombie_list)
          
    def zombies(self):
        """
        Generator that yields the zombies in the order they were
        added.
        """
        return (zombie for zombie in self._zombie_list)
    
    def add_human(self, row, col):
        """
        Add human to the human list
        """
        self._human_list.append((row, col))
        
    def num_humans(self):
        """
        Return number of humans
        """
        return len(self._human_list)
    
    def humans(self):
        """
        Generator that yields the humans in the order they were added.
        """
        return (human for human in self._human_list)
        
    def compute_distance_field(self, entity_type):
        """
        Function computes and returns a 2D distance field
        Distance at member of entity_list is zero
        Shortest paths avoid obstacles and use four-way distances
        """
        visited = poc_grid.Grid(self._grid_height, self._grid_width)
        visited.clear()
        distance_field = [[self._grid_width * self._grid_height for dummy_width in range(self._grid_width)] for dummy_height in range(self._grid_height)]
        boundry = poc_queue.Queue()
        
        if entity_type == HUMAN:
            for human_position in self._human_list:
                boundry.enqueue(human_position)
            
        elif entity_type == ZOMBIE:
            for zombie_position in self._zombie_list:
                boundry.enqueue(zombie_position)
                
        for cell in boundry:
            visited.set_full(cell[0], cell[1])
            distance_field[cell[0]][cell[1]] = 0
           
        while len(boundry) != 0:
            current_cell = boundry.dequeue()
            neighbors = self.four_neighbors(current_cell[0], current_cell[1])
            for neighbor_cell in neighbors:
                if not self.is_empty(neighbor_cell[0], neighbor_cell[1]):
                    visited.set_full(neighbor_cell[0], neighbor_cell[1])                    
                if visited.is_empty(neighbor_cell[0], neighbor_cell[1]):
                    visited.set_full(neighbor_cell[0], neighbor_cell[1])
                    distance_field[neighbor_cell[0]][neighbor_cell[1]] = (distance_field[current_cell[0]][current_cell[1]] + 1) 
                    boundry.enqueue(neighbor_cell)
                    
        return distance_field
                    
    def move_humans(self, zombie_distance_field):
        """
        Function that moves humans away from zombies, diagonal moves
        are allowed
        """
        for human in list(self._human_list):
            neighbors = self.eight_neighbors(human[0], human[1])
            max_df_value = zombie_distance_field[human[0]][human[1]]
            next_space = [human]
            
            for neighbor in neighbors:
                if self.is_empty(neighbor[0], neighbor[1]):
                    if zombie_distance_field[neighbor[0]][neighbor[1]] > max_df_value:
                        max_df_value = zombie_distance_field[neighbor[0]][neighbor[1]]
                        next_space = [neighbor]
                    elif zombie_distance_field[neighbor[0]][neighbor[1]] == max_df_value:
                        next_space.append(neighbor)
                        
            self._human_list.remove(human)
            moved_human = random.choice(next_space)
            self.add_human(moved_human[0], moved_human[1])
            
    def move_zombies(self, human_distance_field):
        """
        Function that moves zombies towards humans, no diagonal moves
        are allowed
        """
        for zombie in list(self._zombie_list):
            neighbors = self.four_neighbors(zombie[0], zombie[1])
            min_df_value = human_distance_field[zombie[0]][zombie[1]]
            next_space = [zombie]
            
            for neighbor in neighbors:
                if self.is_empty(neighbor[0], neighbor[1]):
                    if human_distance_field[neighbor[0]][neighbor[1]] < min_df_value:
                        min_df_value = human_distance_field[neighbor[0]][neighbor[1]]
                        next_space = [neighbor]
                    elif human_distance_field[neighbor[0]][neighbor[1]] == min_df_value:
                        next_space.append(neighbor)

            self._zombie_list.remove(zombie)
            moved_zombie = random.choice(next_space)
            self.add_zombie(moved_zombie[0], moved_zombie[1])

# Start up gui for simulation - You will need to write some code above
# before this will work without errors

poc_zombie_gui.run_gui(Apocalypse(30, 40))
