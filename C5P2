"""
Project #2 in Algorithmic Thinking (Part 1)
"""

# general imports
from collections import deque
import random


def bfs_visited(ugraph, start_node):
    """
    Takes the undirected graph, ugraph, and the node, start_node,
    and returns the set consisting of all nodes that are visited
    by a breadth-first search that starts at start_node.
    """
    queue = deque()
    visited = set([start_node])
    queue.append(start_node)
    while len(queue) > 0:
        node = queue.popleft()
        for neighbor in ugraph[node]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
    return visited


def cc_visited(ugraph):
    """
    Takes the undirected graph and returns a list of sets,
    where each set consists of all the nodes (and nothing else)
    in a connected component, and there is exactly one set in
    the list for each connected component in ugraph and nothing else.
    """
    remaining = set([node for node in ugraph.keys()])
    con_com = []
    while len(remaining) > 0:
        node = random.choice(tuple(remaining))
        visited = bfs_visited(ugraph, node)
        con_com.append(visited)
        remaining = remaining - visited
    return con_com


def largest_cc_size(ugraph):
    """
    Takes the undirected graph and returns the size (an integer) of
    the largest connected component in ugraph.
    """
    max_size = 0
    for node_set in cc_visited(ugraph):
        if len(node_set) > max_size:
            max_size = len(node_set)
    return max_size


def compute_resilience(ugraph, attack_order):
    """
    Takes the undirected graph, ugraph, and a list of nodes, attack_order.
    Iterates through the nodes in attack_order. For each node in the list,
    the function removes the given node and its edges from the graph and
    then computes the size of the largest connected component for the
    resulting graph. The function should return a list whose k+1th entry is
    the size of the largest connected component in the graph after the removal
    of the first k nodes in attack_order. The first entry (indexed by zero) is
    the size of the largest connected component in the original graph.
    """
    temp_graph = dict(ugraph)
    ans = [largest_cc_size(temp_graph)]
    for node in attack_order:
        for out_node in temp_graph[node]:
            temp_graph[out_node].remove(node)
        del temp_graph[node]
        ans.append(largest_cc_size(temp_graph))
    return ans
