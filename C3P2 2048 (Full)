"""
Clone of 2048 game.
"""

import poc_2048_gui, random

# Directions, DO NOT MODIFY
UP = 1
DOWN = 2
LEFT = 3
RIGHT = 4

# Offsets for computing tile indices in each direction.
# DO NOT MODIFY this dictionary.
OFFSETS = {UP: (1, 0),
           DOWN: (-1, 0),
           LEFT: (0, 1),
           RIGHT: (0, -1)}

def merge(line):
    """
    Helper function that merges a single row or column in 2048
    """
    result = list(line)
    for index in range(line.count(0)):
        result.remove(0)
        result.append(0)
    for index in range(1,len(line)):
        if result[index] == result[index-1]:
            result[index-1] *= 2
            result.pop(index)
            result.append(0)
    return result

class TwentyFortyEight:
    """
    Class to run the game logic.
    """

    def __init__(self, grid_height, grid_width):
        self._height = grid_height
        self._width = grid_width
        self._initials = {UP:[(0,i) for i in range(self._width)], 
                         DOWN:[(self._height-1,i) for i in range(self._width)],
                         LEFT:[(i,0) for i in range(self._height)],
                         RIGHT:[(i,self._width-1) for i in range(self._height)]}
        self.reset()
        
    def reset(self):
        """
        Reset the game so the grid is empty except for two
        initial tiles.
        """
        self._grid = [[0 for dummy_col in range(self.get_grid_width())] for dummy_row in range(self.get_grid_height())]
        self.new_tile()
        self.new_tile()

    def __str__(self):
        """
        Return a string representation of the grid for debugging.
        """
        return str(self._grid)

    def get_grid_height(self):
        """
        Get the height of the board.
        """
        return self._height

    def get_grid_width(self):
        """
        Get the width of the board.
        """
        return self._width

    def move(self, direction):
        """
        Move all tiles in the given direction and add
        a new tile if any tiles moved.
        """
        moved = False
        
        if direction == UP or direction == DOWN:
            iteration_len = self.get_grid_height()
        if direction == LEFT or direction == RIGHT:
            iteration_len = self.get_grid_width()
            
        for start in self._initials[direction]:
            input_tiles = []
            tile_pos = []
            for step in range(iteration_len):
                row = start[0] + step * OFFSETS[direction][0]
                col = start[1] + step * OFFSETS[direction][1]
                input_tiles.append(self.get_tile(row, col))
                tile_pos.append([row,col])
            output_tiles = merge(input_tiles)
            if output_tiles != input_tiles:
                moved = True
            for index in range(len(output_tiles)):
                self.set_tile(tile_pos[index][0],tile_pos[index][1],output_tiles[index])
        if moved:
            self.new_tile()
                
    def new_tile(self):
        """
        Create a new tile in a randomly selected empty
        square.  The tile should be 2 90% of the time and
        4 10% of the time.
        """
        empty_cells = [[row,col] for row in range(self.get_grid_height()) for col in range(self.get_grid_width()) if self.get_tile(row,col) == 0]         
        if empty_cells:
            new_tiles_pos = random.choice(empty_cells)
            if random.random() < 0.9:
                self.set_tile(new_tiles_pos[0],new_tiles_pos[1], 2)
            else:
                self.set_tile(new_tiles_pos[0],new_tiles_pos[1], 4)
                    
    def set_tile(self, row, col, value):
        """
        Set the tile at position row, col to have the given value.
        """
        self._grid[row][col] = value

    def get_tile(self, row, col):
        """
        Return the value of the tile at position row, col.
        """
        return self._grid[row][col]

poc_2048_gui.run_gui(TwentyFortyEight(4, 4))
