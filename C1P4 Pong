# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos = [WIDTH/2,HEIGHT/2]
ball_vel = [0,0]
paddle1_pos = [[0,(HEIGHT/2 - HALF_PAD_HEIGHT)], [0,(HEIGHT/2 + HALF_PAD_HEIGHT)],[PAD_WIDTH,(HEIGHT/2 + HALF_PAD_HEIGHT)],[PAD_WIDTH,(HEIGHT/2 - HALF_PAD_HEIGHT)]]
paddle2_pos = [[WIDTH,(HEIGHT/2 - HALF_PAD_HEIGHT)], [WIDTH,(HEIGHT/2 + HALF_PAD_HEIGHT)],[(WIDTH - PAD_WIDTH),(HEIGHT/2 + HALF_PAD_HEIGHT)],[(WIDTH - PAD_WIDTH),(HEIGHT/2 - HALF_PAD_HEIGHT)]]
paddle1_vel = 0
paddle2_vel = 0
paddle_vel_inc = 3
BALL_SPEED_FACTOR = 1.1
Collision = False
score1 = 0
score2 = 0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2,HEIGHT/2]
    ball_vel[1] = -random.random()*2 - 1
    if direction == RIGHT:
        ball_vel[0] = random.random()*2 + 2
    if direction == LEFT:
        ball_vel[0] = -random.random()*2 - 2

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel, score1, score2  # these are numbers
    global score1, score2  # these are ints
    direction = random.choice([LEFT,RIGHT])
    score1 = 0
    score2 = 0
    spawn_ball(direction)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, Collision
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    if ball_pos[1] < BALL_RADIUS or ball_pos[1] > HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
    if ball_pos[0] < BALL_RADIUS and Collision == False:
        score2 += 1
        spawn_ball(RIGHT)
    if ball_pos[0] > WIDTH - BALL_RADIUS and Collision == False:
        score1 += 1
        spawn_ball(LEFT)
            
    # draw ball
    canvas.draw_circle(ball_pos,BALL_RADIUS,5,'white','white')
    
    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos[0][1] = max(0,min(paddle1_pos[0][1] + paddle1_vel,HEIGHT - PAD_HEIGHT))
    paddle1_pos[1][1] = max(PAD_HEIGHT,min(paddle1_pos[1][1] + paddle1_vel,HEIGHT))
    paddle1_pos[2][1] = max(PAD_HEIGHT,min(paddle1_pos[2][1] + paddle1_vel,HEIGHT))
    paddle1_pos[3][1] = max(0,min(paddle1_pos[3][1] + paddle1_vel,HEIGHT - PAD_HEIGHT))
    paddle2_pos[0][1] = max(0,min(paddle2_pos[0][1] + paddle2_vel,HEIGHT - PAD_HEIGHT))
    paddle2_pos[1][1] = max(PAD_HEIGHT,min(paddle2_pos[1][1] + paddle2_vel,HEIGHT))
    paddle2_pos[2][1] = max(PAD_HEIGHT,min(paddle2_pos[2][1] + paddle2_vel,HEIGHT))
    paddle2_pos[3][1] = max(0,min(paddle2_pos[3][1] + paddle2_vel,HEIGHT - PAD_HEIGHT))
        
    # draw paddles
    canvas.draw_polygon(paddle1_pos,1,'white','white')
    canvas.draw_polygon(paddle2_pos,1,'white','white')
    
    # determine whether paddle and ball collide
    if (ball_pos[0] - BALL_RADIUS) <= (PAD_WIDTH - ball_vel[0]) and (ball_pos[1] + BALL_RADIUS) > paddle1_pos[0][1] and (ball_pos[1] - BALL_RADIUS) < paddle1_pos[1][1]:
        Collision = True
        ball_vel[0] = min(200,(-ball_vel[0] * BALL_SPEED_FACTOR))   
        
    if (ball_pos[0] + BALL_RADIUS) >= (WIDTH - PAD_WIDTH - ball_vel[0]) and (ball_pos[1] + BALL_RADIUS) > paddle2_pos[0][1] and (ball_pos[1] - BALL_RADIUS) < paddle2_pos[1][1]:
        Collision = True       
        ball_vel[0] = max(-200,(-ball_vel[0] * BALL_SPEED_FACTOR))
        
    else:
        Collision = False

    # draw scores
    canvas.draw_text(str(score1),[.1*WIDTH,.1*HEIGHT],40,'Gray')
    canvas.draw_text(str(score2),[.9*WIDTH-20,.1*HEIGHT],40,'Gray')
    
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel = -paddle_vel_inc
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel = paddle_vel_inc
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = -paddle_vel_inc
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel = paddle_vel_inc
        
def keyup(key):
    global paddle1_vel, paddle2_vel, paddle_vel_inc
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel = 0
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel = 0
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel = 0
        
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart",new_game)

# start frame
new_game()
frame.start()
