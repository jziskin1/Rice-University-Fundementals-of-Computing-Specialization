"""
Monte Carlo Tic-Tac-Toe Player
"""

import random
import poc_ttt_gui
import poc_ttt_provided as provided

# Constants for Monte Carlo simulator
# You may change the values of these constants as desired, but
#  do not change their names.
NTRIALS = 500         # Number of trials to run
SCORE_CURRENT = 1.0 # Score for squares played by the current player
SCORE_OTHER = 1.0   # Score for squares played by the other player
    
# Add your functions here.

def mc_trial(board, player):
    """
    This function takes a current board and the next player to move. 
    The function should play a game starting with the given player by 
    making random moves, alternating between players. The function should 
    return when the game is over. The modified board will contain the 
    state of the game, so the function does not return anything. 
    In other words, the function should modify the board input.
    """
    current_player = player
    while board.check_win() == None:
        selected = random.choice(board.get_empty_squares())
        board.move(selected[0], selected[1], current_player)
        current_player = provided.switch_player(player)
             
def mc_update_scores(scores, board, player):
    """
    This function takes a grid of scores (a list of lists) with the same 
    dimensions as the Tic-Tac-Toe board, a board from a completed game, 
    and which player the machine player is. The function should score the 
    completed board and update the scores grid. As the function updates 
    the scores grid directly, it does not return anything
    """
    current_player = player
    other_player = provided.switch_player(player)
    if board.check_win() == current_player:
        for row in range(board.get_dim()):
            for col in range(board.get_dim()):
                if board.square(row, col) == current_player:
                    scores[row][col] += SCORE_CURRENT
                if board.square(row, col) == other_player:
                    scores[row][col] -= SCORE_OTHER
                                       
    if board.check_win() == other_player:
        for row in range(board.get_dim()):
            for col in range(board.get_dim()):
                if board.square(row, col) == current_player:
                    scores[row][col] -= SCORE_CURRENT
                if board.square(row, col) == other_player:
                    scores[row][col] += SCORE_OTHER
                    
def get_best_move(board, scores):
    """
    This function takes a current board and a grid of scores. The function 
    should find all of the empty squares with the maximum score and randomly 
    return one of them as a (row, column) tuple. It is an error to call this 
    function with a board that has no empty squares (there is no possible next move), 
    so your function may do whatever it wants in that case. The case where the 
    board is full will not be tested.
    """
    empty_squares = board.get_empty_squares()
    empty_scores = []
    max_squares = []
    for row, col in empty_squares:
        empty_scores.append(scores[row][col])
    max_value = max(empty_scores)
    for index in range(len(empty_scores)):
        if empty_scores[index] == max_value:
            max_squares.append(empty_squares[index])
    return random.choice(max_squares)
    
def mc_move(board, player, trials):
    """
    This function takes a current board, which player the machine player is, 
    and the number of trials to run. The function should use the Monte Carlo 
    simulation described above to return a move for the machine player in the 
    form of a (row, column) tuple. Be sure to use the other functions you have written!
    """
    scores = [[0 for dummy_col in range(board.get_dim())] for dummy_row in range(board.get_dim())]
    for dummy_trial in range(trials):
        clone = board.clone()
        mc_trial(clone, player)
        mc_update_scores(scores, clone, player)
    return get_best_move(board, scores)

# Test game with the console or the GUI.  Uncomment whichever 
# you prefer.  Both should be commented out when you submit 
# for testing to save time.

provided.play_game(mc_move, NTRIALS, False)        
poc_ttt_gui.run_gui(3, provided.PLAYERX, mc_move, NTRIALS, False)
