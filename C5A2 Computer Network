"""
Application #2 from Intro to Alogrithmic Thinking (Part 1)
"""

# general imports
from collections import deque
import random
import urllib.request
from C5P2 import compute_resilience
from matplotlib import pyplot as plt
import timeit

###################################
# Code for loading computer network graph

COMPUTER_NET_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_rf7.txt"


def load_graph(graph_url):
    """
    Function that loads a graph given the URL
    for a text representation of the graph
    Returns a dictionary that models a graph
    """
    graph_file = urllib.request.urlopen(graph_url)
    graph_text = graph_file.read().decode('utf-8')
    graph_lines = graph_text.split('\n')
    graph_lines = graph_lines[: -1]

    print("Loaded graph with", len(graph_lines), "nodes")

    answer_graph = {}
    for line in graph_lines:
        neighbors = line.split(' ')
        node = int(neighbors[0])
        answer_graph[node] = set([])
        for neighbor in neighbors[1: -1]:
            answer_graph[node].add(int(neighbor))

    return answer_graph


def random_ugraph(n, p):
    """
    Returns a undirected graph with n nodes
    and randomized edges
    """
    digraph = {}
    for node in range(n):
        digraph[node] = set([])
    for node1 in range(n):
        for node2 in range(node1 + 1, n):
            a = random.random()
            if a < p:
                digraph[node1].add(node2)
                digraph[node2].add(node1)
    return digraph


def make_complete_graph(num_nodes):
    """
    Takes the number of nodes and
    returns a dictionary with a
    complete graph.
    """
    graph = {}
    for start_node in range(num_nodes):
        end_node_set = set([num for num in range(num_nodes)])
        end_node_set.remove(start_node)
        graph[start_node] = end_node_set
    return graph


def UPA(n, m):
    nodes = {k for k in range(m)}
    graph = make_complete_graph(m)
    UPA_Trial = UPATrial(m)
    for i in range(m, n):
        nodes_prime = UPA_Trial.run_trial(m)
        for j in nodes_prime:
            graph[j].add(i)
        nodes.add(i)
        graph[i] = nodes_prime
    return graph


class UPATrial:
    """
    Simple class to encapsulate optimizated trials for the UPA algorithm

    Maintains a list of node numbers with multiple instance of each number.
    The number of instances of each node number are
    in the same proportion as the desired probabilities

    Uses random.choice() to select a node number from this list for each trial.
    """

    def __init__(self, num_nodes):
        """
        Initialize a UPATrial object corresponding to a
        complete graph with num_nodes nodes

        Note the initial list of node numbers has num_nodes copies of
        each node number
        """
        self._num_nodes = num_nodes
        self._node_numbers = [node for node in range(
            num_nodes) for dummy_idx in range(num_nodes)]

    def run_trial(self, num_nodes):
        """
        Conduct num_nodes trials using by applying random.choice()
        to the list of node numbers

        Updates the list of node numbers so that each node number
        appears in correct ratio

        Returns:
        Set of nodes
        """

        # compute the neighbors for the newly-created node
        new_node_neighbors = set()
        for _ in range(num_nodes):
            new_node_neighbors.add(random.choice(self._node_numbers))

        # update the list of node numbers so that each node number
        # appears in the correct ratio
        self._node_numbers.append(self._num_nodes)
        for dummy_idx in range(len(new_node_neighbors)):
            self._node_numbers.append(self._num_nodes)
        self._node_numbers.extend(list(new_node_neighbors))

        # update the number of nodes
        self._num_nodes += 1
        return new_node_neighbors


def count_edges(graph):
    """
    Takes a ugraph and returns the number
    of edges in the graph
    """
    count = 0
    for key in graph:
        count += len(graph[key])
    count /= 2
    return count


# Calculation of p and m
'''
nodes = 1239    edges = 3047
p = 2 * (3047 / (1239 * 1238)) = 0.003972 round to 0.004
m = average degree per node   3047 / 1239 = 2.45 round to 3
'''


def random_order(ugraph):
    rand_node_list = [node for node in ugraph]
    random.shuffle(rand_node_list)
    return rand_node_list


# graph_a = load_graph(COMPUTER_NET_URL)
# graph_b = random_ugraph(1239, 0.004)
# graph_c = UPA(1239, 3)


# x = [k for k in range(0, 1240)]
# y_a = compute_resilience(graph_a, random_order(graph_a))
# y_b = compute_resilience(graph_b, random_order(graph_b))
# y_c = compute_resilience(graph_c, random_order(graph_c))
# plt.plot(x, y_a, label='Computer Network')
# plt.plot(x, y_b, label="Random ER Graph (p = 0.004)")
# plt.plot(x, y_c, label="Random UPA Graph (m = 3)")
# plt.xlabel('Nodes Removed')
# plt.ylabel('Largest Connected Component Remaining')
# plt.title('Standard Plot of Graph Resilience Given Random Attack Order')
# plt.legend()
# plt.grid()
# plt.show()

# Answer to Question 1
'''
jpeg of graph above
'''

############################################################################

# k = int(1239 * 0.2)  # nodes removed
# n = 1239 - k        # nodes remaining
# a = n * (0.75)      # lower bound


# print(y_a[k + 1] > a)  # True
# print(y_b[k + 1] > a)  # True
# print(y_c[k + 1] > a)  # True

# Answer to Question 2
'''
All three graphs are resilient when 20% of their nodes have been attacked.
This is because their decrease is mostly linear.
'''

############################################################################
# Provided code includes copy_graph, delete_node, and targeted order


def copy_graph(graph):
    """
    Make a copy of a graph
    """
    new_graph = {}
    for node in graph:
        new_graph[node] = set(graph[node])
    return new_graph


def delete_node(ugraph, node):
    """
    Delete a node from an undirected graph
    """
    neighbors = ugraph[node]
    ugraph.pop(node)
    for neighbor in neighbors:
        ugraph[neighbor].remove(node)


def targeted_order(ugraph):
    """
    Compute a targeted attack order consisting
    of nodes of maximal degree

    Returns:
    A list of nodes
    """
    # copy the graph
    new_graph = copy_graph(ugraph)

    order = []
    while len(new_graph) > 0:
        max_degree = -1
        for node in new_graph:
            if len(new_graph[node]) > max_degree:
                max_degree = len(new_graph[node])
                max_degree_node = node

        neighbors = new_graph[max_degree_node]
        new_graph.pop(max_degree_node)
        for neighbor in neighbors:
            new_graph[neighbor].remove(max_degree_node)

        order.append(max_degree_node)
    return order


def fast_targeted_order(ugraph):
    """
    Returns list of nodes by order of greatest to smallest
    degree as each node is removed.
    """
    ugraph_copy = copy_graph(ugraph)
    num_nodes = len(ugraph_copy)
    degree_sets = [set([]) for i in range(num_nodes)]
    for node in ugraph:
        degree_node = len(ugraph[node])
        degree_sets[degree_node].add(node)
    targeted_order = []
    for degree in range(num_nodes - 1, -1, -1):
        while len(degree_sets[degree]) > 0:
            node = degree_sets[degree].pop()
            for neighbor in ugraph_copy[node]:
                degree_neighbor = len(ugraph_copy[neighbor])
                degree_sets[degree_neighbor].remove(neighbor)
                degree_sets[degree_neighbor - 1].add(neighbor)
            targeted_order.append(node)
            delete_node(ugraph_copy, node)
    return targeted_order


def time_functions(func):
    result = []
    for nodes in range(10, 1000, 10):
        start = timeit.default_timer()
        func(UPA(nodes, 5))
        stop = timeit.default_timer()
        result.append(stop - start)
    return result


# x = range(10, 1000, 10)
# y_slow = time_functions(targeted_order)
# y_fast = time_functions(fast_targeted_order)

# plt.plot(x, y_slow, label="Targeted Order Function")
# plt.plot(x, y_fast, label="Fast Targeted Order Function")
# plt.xlabel('Number of nodes in UPA graph (m = 5)')
# plt.ylabel('Running time in seconds')
# plt.title("Comparison of Functions' Running Time as Nodes Increase")
# plt.legend()
# plt.plot()
# plt.show()


# Answer to Question 3
'''
O(n^2) for the targeted_order function.
O(n) for the fast_targeted_order function.

jpeg of graph above
'''
############################################################################

# graph_a = load_graph(COMPUTER_NET_URL)
# graph_b = random_ugraph(1239, 0.004)
# graph_c = UPA(1239, 3)

# targeted_order_a = fast_targeted_order(graph_a)
# targeted_order_b = fast_targeted_order(graph_b)
# targeted_order_c = fast_targeted_order(graph_c)

# x = [k for k in range(0, 1240)]
# y_a = compute_resilience(graph_a, fast_targeted_order(graph_a))
# y_b = compute_resilience(graph_b, fast_targeted_order(graph_b))
# y_c = compute_resilience(graph_c, fast_targeted_order(graph_c))
# plt.plot(x, y_a, label='Computer Network')
# plt.plot(x, y_b, label="Random ER Graph (p = 0.004)")
# plt.plot(x, y_c, label="Random UPA Graph (m = 3)")
# plt.xlabel('Nodes Removed')
# plt.ylabel('Largest Connected Component Remaining')
# plt.title('Standard Plot of Graph Resilience Given Targeted Attack Order')
# plt.legend()
# plt.grid()
# plt.show()

# Answer to Question 4
'''
jpeg of graph above
'''
############################################################################

# k = int(1239 * 0.2)  # nodes removed
# n = 1239 - k        # nodes remaining
# a = n * (0.75)      # lower bound


# print(y_a[k + 1] > a)  # False
# print(y_b[k + 1] > a)  # True
# print(y_c[k + 1] > a)  # True

# Answer to Question 5
'''
The computer network is not resilient, but both the ER graph and UPA graph are.
'''

############################################################################

# Answer to Question 6
'''
Randomly connecting computers for the sole purpose of thwarting hackers is not a good
idea. Computer connections are not random and trying to randomize this process may
cause certain computers to connect that have no business being connected. Hackers are
very smart and can certainly adjust their plan of attack if they realize that computer
networks are being set up in a more randomized way. Overall, this seems like a huge
waste of time and money.
'''
