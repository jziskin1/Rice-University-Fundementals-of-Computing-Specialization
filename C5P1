"""
Degree Distributions for Graphs
Project #1
Intro to Algorithmic Thinking
"""

import random

# Representing directed graphs
EX_GRAPH0 = {0: set([1,2]), 1: set([]), 2: set([])}
EX_GRAPH1 = {0: set([1,4,5]), 1: set([2,6]), 2: set([3]), 
             3: set([0]), 4: set([1]), 5: set([2]),
             6: set([])}
EX_GRAPH2 = {0: set([1,4,5]), 1: set([2,6]), 2: set([3,7]), 
             3: set([7]), 4: set([1]), 5: set([2]),
             6: set([]), 7: set([3]), 8: set([1,2]), 
             9: set([0,3,4,5,6,7])}


def make_complete_graph(num_nodes):
    """
    Takes the number of nodes and
    returns a dictionary with a 
    completegraph.
    """ 
    graph = {}
    for start_node in range(num_nodes):
        end_node_set = set([num for num in range(num_nodes)])
        end_node_set.remove(start_node)
        graph[start_node] = end_node_set
    return graph
      
    
# Computing in-degree distributions
def compute_in_degrees(digraph):
    """
    Takes a digraph and returns
    a dictionary with the keys as 
    nodes and the values as the
    number of in_degrees
    """
    result = {}
    for starting_node, ending_node_set in digraph.items():
        if starting_node not in result:
            result[starting_node] = 0
        for node in ending_node_set:
            if node in result:
                result[node] += 1
            else:
                result[node] = 1
    return result


def in_degree_distribution(digraph):
    """
    Takes a digraph and returns
    an in-degree distribution
    """
    dist = {}
    in_degrees = compute_in_degrees(digraph)
    for value in in_degrees.values():
        if value in dist:
            dist[value] += 1
        else:
            dist[value] = 1
    return dist
