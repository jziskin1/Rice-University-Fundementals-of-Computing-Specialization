"""
Student template code for Project 3
Student will implement five functions:

slow_closest_pair(cluster_list)
fast_closest_pair(cluster_list)
closest_pair_strip(cluster_list, horiz_center, half_width)
hierarchical_clustering(cluster_list, num_clusters)
kmeans_clustering(cluster_list, num_clusters, num_iterations)

where cluster_list is a 2D list of clusters in the plane
"""

import math
import alg_cluster


######################################################
# Code for closest pairs of clusters

def pair_distance(cluster_list, idx1, idx2):
    """
    Helper function that computes Euclidean distance between two clusters in a list

    Input: cluster_list is list of clusters, idx1 and idx2 are integer indices for two clusters

    Output: tuple (dist, idx1, idx2) where dist is distance between
    cluster_list[idx1] and cluster_list[idx2]
    """
    return (cluster_list[idx1].distance(cluster_list[idx2]), min(idx1, idx2), max(idx1, idx2))


def slow_closest_pair(cluster_list):
    """
    Compute the distance between the closest pair of clusters in a list (slow)

    Input: cluster_list is the list of clusters

    Output: tuple of the form (dist, idx1, idx2) where the centers of the clusters
    cluster_list[idx1] and cluster_list[idx2] have minimum distance dist.
    """
    min_distance, i_index, j_index = float('inf'), -1, -1
    for index_1 in range(0, len(cluster_list)):
        for index_2 in range(index_1 + 1, len(cluster_list)):
            distance = cluster_list[index_1].distance(cluster_list[index_2])
            if distance < min_distance:
                min_distance = distance
                i_index = index_1
                j_index = index_2
    return min_distance, i_index, j_index


def fast_closest_pair(cluster_list):
    """
    Compute the distance between the closest pair of clusters in a list (fast)

    Input: cluster_list is list of clusters SORTED such that horizontal positions of their
    centers are in ascending order

    Output: tuple of the form (dist, idx1, idx2) where the centers of the clusters
    cluster_list[idx1] and cluster_list[idx2] have minimum distance dist.
    """
    cluster_list.sort(key=lambda cluster: cluster.horiz_center())
    cluster_length = len(cluster_list)
    if cluster_length <= 3:
        return slow_closest_pair(cluster_list)
    else:
        halfway = cluster_length // 2
        min_distance_l, i_index_l, j_index_l = fast_closest_pair(
            cluster_list[:halfway])
        min_distance_r, i_index_r, j_index_r = fast_closest_pair(
            cluster_list[halfway:])
        if min_distance_l < min_distance_r:
            min_distance, i_index, j_index = min_distance_l, i_index_l, j_index_l
        else:
            min_distance, i_index, j_index = min_distance_r, i_index_r + \
                halfway, j_index_r + halfway
        mid = 0.5 * ((cluster_list[halfway].horiz_center()) +
                     (cluster_list[halfway - 1].horiz_center()))
        cps = closest_pair_strip(
            cluster_list, mid, min_distance)
        if cps[0] < min_distance:
            min_distance, i_index, j_index = cps
        return min_distance, i_index, j_index


def closest_pair_strip(cluster_list, horiz_center, half_width):
    """
    Helper function to compute the closest pair of clusters in a vertical strip

    Input: cluster_list is a list of clusters produced by fast_closest_pair
    horiz_center is the horizontal position of the strip's vertical center line
    half_width is the half the width of the strip (i.e; the maximum horizontal distance
    that a cluster can lie from the center line)

    Output: tuple of the form (dist, idx1, idx2) where the centers of the clusters
    cluster_list[idx1] and cluster_list[idx2] lie in the strip and have minimum distance dist.
    """

    cluster_list.sort(key=lambda cluster: cluster.horiz_center())
    cluster_list_center = [cluster for cluster in cluster_list if abs(
        cluster.horiz_center() - horiz_center) < half_width]
    cluster_list_center.sort(key=lambda cluster: cluster.vert_center())
    cluster_length = len(cluster_list_center)
    min_distance, i_index, j_index = float('inf'), -1, -1
    for index_1 in range(0, cluster_length - 1):
        for index_2 in range(index_1 + 1, min(index_1 + 4, cluster_length)):
            distance = cluster_list_center[index_1].distance(
                cluster_list_center[index_2])
            if distance < min_distance:
                min_distance = distance
                i_index = cluster_list.index(cluster_list_center[index_1])
                j_index = cluster_list.index(cluster_list_center[index_2])
                if i_index > j_index:
                    i_index, j_index = j_index, i_index
    return min_distance, i_index, j_index


######################################################################
# Code for hierarchical clustering


def hierarchical_clustering(cluster_list, num_clusters):
    """
    Compute a hierarchical clustering of a set of clusters
    Note: the function may mutate cluster_list

    Input: List of clusters, integer number of clusters
    Output: List of clusters whose length is num_clusters
    """
    clusters = [cluster for cluster in cluster_list]
    while len(clusters) > num_clusters:
        closest_pairs = fast_closest_pair(clusters)
        i_idx, j_idx = closest_pairs[1], closest_pairs[2]
        clusters[i_idx].merge_clusters(clusters[j_idx])
        clusters.remove(clusters[j_idx])
    return clusters


######################################################################
# Code for k-means clustering


def kmeans_clustering(cluster_list, num_clusters, num_iterations):
    """
    Compute the k-means clustering of a set of clusters
    Note: the function may not mutate cluster_list

    Input: List of clusters, integers number of clusters and number of iterations
    Output: List of clusters whose length is num_clusters
    """
    cluster_copy = [cluster for cluster in cluster_list]
    cluster_copy.sort(key=lambda cluster: cluster.total_population())
    cluster_centers = cluster_copy[-num_clusters:]

    for dummy_iter in range(num_iterations):
        new_clusters = [alg_cluster.Cluster(set([]), cluster.horiz_center(
        ), cluster.vert_center(), 0, 0) for cluster in cluster_centers]
        for point in cluster_list:
            distance = float('inf')
            closest_cluster = None
            for cluster in cluster_centers:
                if point.distance(cluster) < distance:
                    distance = point.distance(cluster)
                    closest_cluster = cluster
            new_clusters[cluster_centers.index(
                closest_cluster)].merge_clusters(point)
        cluster_centers = new_clusters
    return cluster_centers
