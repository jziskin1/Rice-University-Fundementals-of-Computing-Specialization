"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set

def permutation(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                if partial_sequence.count(item) < outcomes.count(item):
                    new_sequence = list(partial_sequence)
                    new_sequence.append(item)
                    new_sequence.sort()
                    temp_set.add(tuple(new_sequence))         
        answer_set = temp_set
    return answer_set

def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    hand_score = 0
    for dice in hand:
        hand_score = max(hand_score, dice * hand.count(dice))
    return hand_score

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    exp_val = 0
    list_of_future_rolls = gen_all_sequences(range(1,num_die_sides + 1), num_free_dice)
    for rolls in list_of_future_rolls:
        current_dice = list(held_dice)
        for roll in rolls:
            current_dice.append(roll)
        exp_val += score(current_dice)
    exp_val = float(exp_val) / float(len(list_of_future_rolls))
    return exp_val
            
def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    all_holds = set([()])
    for hand_length in range(len(hand)+1):
        holds = permutation(hand, hand_length)
        for sequence in holds:
            all_holds.add(sequence)
    return all_holds

def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    max_exp_val = 0
    all_holds = gen_all_holds(hand)
    for hold in all_holds:
        hold_exp_val = expected_value(hold, num_die_sides, len(hand) - len(hold))
        if hold_exp_val > max_exp_val:
            max_exp_val = hold_exp_val
            max_hold = hold   
    return (max_exp_val,max_hold)

def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (1, 1, 1, 5, 6)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
     
#run_example()
#import poc_holds_testsuite
#poc_holds_testsuite.run_suite(gen_all_holds)
