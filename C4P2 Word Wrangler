"""
Student code for Word Wrangler game
"""

import urllib2
import codeskulptor
import poc_wrangler_provided as provided

WORDFILE = "assets_scrabble_words3.txt"

# Functions to manipulate ordered word lists

def remove_duplicates(list1):
    """
    Eliminate duplicates in a sorted list.
    Returns a new sorted list with the same elements in list1, but
    with no duplicates.
    This function can be iterative.
    """
    if list1 == []:
        return []
    result = [list1[0]]
    for index in range(1, len(list1)):
        if list1[index] != list1[index - 1]:
            result.append(list1[index])
    return result

def intersect(list1, list2):
    """
    Compute the intersection of two sorted lists.
    Returns a new sorted list containing only elements that are in
    both list1 and list2.
    This function can be iterative.
    """
    if list1 == [] or list2 == []:
        return []
    result = []
    for word in list2:
        if word in list1:
            result.append(word)
    return result         

# Functions to perform merge sort

def merge(list1, list2):
    """
    Merge two sorted lists.
    Returns a new sorted list containing those elements that are in
    either list1 or list2.
    This function can be iterative.
    """   
    result = []
    copy1 = list(list1)
    copy2 = list(list2)
    while copy1 != [] and copy2 != []:
        if copy1[0] < copy2[0]:
            result.append(copy1.pop(0))
        else:
            result.append(copy2.pop(0))    
    return result + copy1 + copy2
                
def merge_sort(list1):
    """
    Sort the elements of list1.
    Return a new sorted list with the same elements as list1.
    This function should be recursive.
    """
    mid = len(list1)/2
    
    if len(list1) == 0:
        return []
    elif len(list1) == 1:
        return list1
    elif len(list1) == 2:
        return merge([list1[0]], [list1[1]])
    else:
        return merge(merge_sort(list1[:mid]), merge_sort(list1[mid:]))

# Function to generate all strings for the word wrangler game

def gen_all_strings(word):
    """
    Generate all strings that can be composed from the letters in word
    in any order.
    Returns a list of all strings that can be formed from the letters
    in word.
    This function should be recursive.
    """
    if word == "":
        return [word]
    first = word[0]
    rest = word[1:]
    temp_strings = []
    rest_strings = gen_all_strings(rest)
    for string in rest_strings:
        for index in range(len(string) + 1):
            temp_strings.append(string[:index] + first + string[index:])
    return gen_all_strings(rest) + temp_strings

# Function to load words from a file

def load_words(filename):
    """
    Load word list from the file named filename.
    Returns a list of strings.
    """
    url = codeskulptor.file2url(filename)
    netfile = urllib2.urlopen(url)
    return netfile.read()

def run():
    """
    Run game.
    """
    words = load_words(WORDFILE)
    wrangler = provided.WordWrangler(words, remove_duplicates, 
                                     intersect, merge_sort, 
                                     gen_all_strings)
    provided.run_game(wrangler)

# Uncomment when you are ready to try the game
# run()
