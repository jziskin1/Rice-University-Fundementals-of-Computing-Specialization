"""
Provided code for Application portion of Module 1
Imports physics citation graph
"""

# general imports
from matplotlib import pyplot as plt
import urllib.request
import math
import random

###################################
# Code for loading citation graph

CITATION_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_phys-cite.txt"


def load_graph(graph_url):
    """
    Function that loads a graph given the URL
    for a text representation of the graph
    Returns a dictionary that models a graph
    """
    graph_file = urllib.request.urlopen(graph_url)
    graph_text = graph_file.read().decode('utf-8')
    graph_lines = graph_text.split('\n')
    graph_lines = graph_lines[: -1]

    print("Loaded graph with", len(graph_lines), "nodes")

    answer_graph = {}
    for line in graph_lines:
        neighbors = line.split(' ')
        node = int(neighbors[0])
        answer_graph[node] = set([])
        for neighbor in neighbors[1: -1]:
            answer_graph[node].add(int(neighbor))

    return answer_graph


def compute_in_degrees(digraph):
    """
    Takes a digraph and returns a dictionary with the keys as
    nodes and the values as the number of in-degrees
    """
    result = {}
    for starting_node, ending_node_set in digraph.items():
        if starting_node not in result:
            result[starting_node] = 0
        for node in ending_node_set:
            if node in result:
                result[node] += 1
            else:
                result[node] = 1
    return result


def in_degree_distribution(digraph):
    """
    Takes a digraph and returns an in-degree distribution
    """
    dist = {}
    in_degrees = compute_in_degrees(digraph)
    for value in in_degrees.values():
        if value in dist:
            dist[value] += 1
        else:
            dist[value] = 1
    return dist


def normalize_distribution(distribution):
    """
    Takes an distribution as a dictionary and
    returns a normalized distribution as a dictionary
    """
    normal_dist = {}
    total_nodes = sum(distribution.values())
    for key in distribution.keys():
        normal_dist[key] = distribution[key] / total_nodes
    return normal_dist


# Create distribution for citation graph
# citation_graph = load_graph(CITATION_URL)
# citation_idd = in_degree_distribution(citation_graph)
# citation_normal_idd = normalize_distribution(citation_idd)


# Create Log/log plot
# x = sorted(citation_normal_idd.keys())
# y = [citation_normal_idd[k] for k in x]
# plt.loglog(x, y, linewidth=0, marker='.')
# plt.title('Log/log plot of normal in-degree distribution for the citation graph')
# plt.xlabel('Number of citations')
# plt.ylabel('Fraction of papers')
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# Answer to Question 1
'''
jpeg of graph above
'''

######################################


def directed_er_graph(n, p):
    """
    Takes n number of nodes and creates a directed
    graph at random. A node will map to another node
    with probability p.
    """
    digraph = {}
    for node in range(n):
        digraph[node] = set([])
    for in_node in range(n):
        for out_node in range(n):
            if in_node != out_node:
                a = random.random()
                if a < p:
                    digraph[in_node].add(out_node)
    return digraph


# a = directed_er_graph(10, 0.5)
# print(a)
# b = in_degree_distribution(a)
# print(b)
# c = normalize_distribution(b)
# print(c)


# x = sorted(d.keys())
# y = [d[k] for k in x]
# plt.loglog(x, y, linewidth=0, marker='.')
# plt.title('')
# plt.xlabel('')
# plt.ylabel('')
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# Answer to question 2
'''
The expected value of every node is the same because each node assignment occurs independently and
with the same probability as every other node assignment.

The ER graph looks more like a bell curve. Adjusting p can make the curve skew further left or right.
Regardless of the p-value, the graph will clearly increase and then decrease

The graphs do not look similar at all. The in-degree distribution for the citation graph decreases rapidly
while the random ER graph increases and then decreases in a bell shape.
'''

######################################

# citation_graph = load_graph(CITATION_URL)


def compute_out_degrees(digraph):
    """
    Takes a digraph and returns a dictionary with the keys as
    nodes and the values as the number of in-degrees
    """
    result = {}
    for starting_node, ending_node_set in digraph.items():
        result[starting_node] = len(digraph[starting_node])
    return result


def compute_average_out_degrees(digraph):
    cod = compute_out_degrees(digraph)
    total_nodes = len(cod.keys())
    total_out_degrees = sum(cod.values())
    return total_out_degrees / total_nodes


# compute_average_out_degrees(citation_graph) = 12.703204897371265

# Answer to question 3
'''
n = number of nodes in citation graph = 27770
m = an integer that is close to the average out-degree of the physics citation graph = 13
'''

######################################


def make_complete_graph(num_nodes):
    """
    Takes the number of nodes and
    returns a dictionary with a
    complete graph.
    """
    graph = {}
    for start_node in range(num_nodes):
        end_node_set = set([num for num in range(num_nodes)])
        end_node_set.remove(start_node)
        graph[start_node] = end_node_set
    return graph


def DPA(n, m):
    V = {k for k in range(m)}
    E = make_complete_graph(m)
    DPA_Trial = DPATrial(m)
    for i in range(m, n):
        V_prime = DPA_Trial.run_trial(m)
        V.add(i)
        E[i] = V_prime
    return V, E


class DPATrial:
    """
    Simple class to encapsulate optimized trials for DPA algorithm

    Maintains a list of node numbers with multiple instances of each number.
    The number of instances of each node number are
    in the same proportion as the desired probabilities

    Uses random.choice() to select a node number from this list for each trial.
    """

    def __init__(self, num_nodes):
        """
        Initialize a DPATrial object corresponding to a
        complete graph with num_nodes nodes

        Note the initial list of node numbers has num_nodes copies of
        each node number
        """
        self._num_nodes = num_nodes
        self._node_numbers = [node for node in range(
            num_nodes) for dummy_idx in range(num_nodes)]

    def run_trial(self, num_nodes):
        """
        Conduct num_node trials using by applying random.choice()
        to the list of node numbers

        Updates the list of node numbers so that the number of instances of
        each node number is in the same ratio as the desired probabilities

        Returns:
        Set of nodes
        """

        # compute the neighbors for the newly-created node
        new_node_neighbors = set()
        for dummy_idx in range(num_nodes):
            new_node_neighbors.add(random.choice(self._node_numbers))

        # update the list of node numbers so that each node number
        # appears in the correct ratio
        self._node_numbers.append(self._num_nodes)
        self._node_numbers.extend(list(new_node_neighbors))

        # update the number of nodes
        self._num_nodes += 1
        return new_node_neighbors


n = 27770
m = 13
dpa = DPA(n, m)

# Create distribution for DPA
# DPA_idd = in_degree_distribution(dpa[1])
# DPA_normal_idd = normalize_distribution(DPA_idd)

# Create Log/log plot
# x = sorted(DPA_normal_idd.keys())
# y = [DPA_normal_idd[k] for k in x]
# plt.loglog(x, y, linewidth=0, marker='.')
# plt.title('Log/log plot of DPA graph')
# plt.xlabel('in-degree')
# plt.ylabel('Fraction of nodes')
# plt.grid(True)
# plt.tight_layout()
# plt.show()

# Answer to Question 4
'''
jpeg of graph above
'''

######################################

# Answer to Question 5
'''
The plots are very similar in their shape. They both decrease in a somewhat linear fashion.

The rich get richer phenomena best describes the behavior of the DPA process as a small number
of nodes have the highest in-degrees while a majority of the nodes have significantly smaller
in-degrees.

The rich get richer phenomena could describe how few papers get cited the most. Papers that
have many citations are more visible and therefore more likely to be cited even more often.
'''
